@using Wallet.Models.WalletModels
@model Wallet.Models.DBViewModels.AddRecordViewModel

@using (@Html.BeginForm("AddTransaction", "DailyRecords", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="text-center" style="background-color: #808080; padding:10px; border-radius:10px ">
        <label style="color: white; font-weight: bold;font-size:large">Choose the Type</label>
        <div id="typeSelection">
            <div class="btn btn-success btn-lg active" id="category-type" value="@Category.Type.Income">@Category.Type.Income</div>
            <div class="btn btn-danger btn-sm " id="category-type" value="@Category.Type.Expenditure">@Category.Type.Expenditure</div>
        </div>
    </div>
    <br />
    <div class=" form-group" style="padding-left: 30px" id="InsertInputData">
        @Html.LabelFor(m => m.TransactionDate)
        @Html.TextBoxFor(m => m.TransactionDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control", @id = "transaction-date", @name = "TransationDate" })
        @Html.ValidationMessageFor(m => m.TransactionDate, "Insert the start date.")

        <br />@*Transaction Value*@
        @*todo: optimize the data annotaion for the values which are negative or not numbers*@
        @Html.LabelFor(m => m.TransactionValue)

        @Html.TextBoxFor(m => m.TransactionValue, new { @class = "form-control", @id = "transaction-value", @name = "TransationValue", @autocomplete = "off" })
        @Html.ValidationMessageFor(m => m.TransactionValue)
        <p style="color:#0094ff" id="transaction-value"></p>



        <br />



        @Html.LabelFor(m => m.WalletAndBankId)

        @Html.DropDownListFor(m => m.WalletAndBankId,
                                            new SelectList(Model.WalletAndBanks, "Id", "Name"),
                                            "--Select the Bank--",
                                            new { @class = "form-control", @id = "select-bank" })
        @Html.ValidationMessageFor(m => m.WalletAndBankId, "Choose a wallet or bank from list.")

        <br />


        @Html.LabelFor(m => m.CategoyId)

        @Html.DropDownListFor(m => m.CategoyId,
                                        new SelectList(Model.Category.Where(c => c.TypeOfCategory.ToString() == "Income"), "Id", "Name"),
                                        "--Select a Category--",
                                        new { @class = "form-control", @id = "select-category", @name = "Category" })
        @Html.ValidationMessageFor(m => m.WalletAndBankId, "Choose a category from list.")

        <br />
        @Html.LabelFor(m => m.SubcategoryId)

        @Html.DropDownListFor(m => m.SubcategoryId,
                                    new SelectList(Model.Subcategory.Where(s => s.Category.TypeOfCategory.ToString() == "0"), "Id", "Name"),
                                    "--Select a Subcategory--",
                                    new { @class = "form-control", @id = "select-subcategory" })
        @Html.ValidationMessageFor(m => m.WalletAndBankId, "Choose a subcategory from list.")



        <br />
        @Html.LabelFor(m => m.Comment)

        @Html.TextAreaFor(m => m.Comment, new { @class = "form-control", @id = "transaction-value", @name = "TransationValue", @placeholder = "Insert a Comment..." })
        @Html.ValidationMessageFor(m=>m.Comment, "Adding comment is mandatory.")
        <br />
    </div>



    
    <div class="text-center">
        <button type="submit" class="btn btn-success text-center">Add New Transactioin</button>
    </div>

}

